// Package thingiverse provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package thingiverse

import (
	"context"
	"encoding/json"
	"fmt"
	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
)

// DetailsSection defines model for DetailsSection.
type DetailsSection struct {
	Data *[]DetailsSectionDataItem `json:"data,omitempty"`
	Name string                    `json:"name"`
	Type string                    `json:"type"`
}

// DetailsSectionDataItem defines model for DetailsSectionDataItem.
type DetailsSectionDataItem struct {
	FilamentBrand    *string `json:"filament_brand,omitempty"`
	FilamentColor    *string `json:"filament_color,omitempty"`
	FilamentMaterial *string `json:"filament_material,omitempty"`
	Infill           *string `json:"infill,omitempty"`
	Notes            *string `json:"notes,omitempty"`
	Printer          *string `json:"printer,omitempty"`
	PrinterBrand     *string `json:"printer brand,omitempty"`
	Resolution       *string `json:"resolution,omitempty"`
	Video            *string `json:"video,omitempty"`
}

// Error defines model for Error.
type Error struct {
	Code    int32  `json:"code"`
	Message string `json:"message"`
}

// File defines model for File.
type File struct {
	Date          *string   `json:"date,omitempty"`
	DownloadCount *int64    `json:"download_count,omitempty"`
	FormattedSize *string   `json:"formatted_size,omitempty"`
	Id            int64     `json:"id"`
	MetaData      *[]string `json:"meta_data,omitempty"`
	Name          string    `json:"name"`
	PublicUrl     *string   `json:"public_url,omitempty"`
	Size          *int64    `json:"size,omitempty"`
	ThreejsUrl    *string   `json:"threejs_url,omitempty"`
	Thumbnail     *string   `json:"thumbnail,omitempty"`
	Url           *string   `json:"url,omitempty"`
}

// Files defines model for Files.
type Files []File

// Thing defines model for Thing.
type Thing struct {
	Added            *string           `json:"added,omitempty"`
	CollectCount     *int64            `json:"collect_count,omitempty"`
	Creator          *User             `json:"creator,omitempty"`
	Description      *string           `json:"description,omitempty"`
	DescriptionHtml  *string           `json:"description_html,omitempty"`
	Details          *string           `json:"details,omitempty"`
	DetailsParts     *[]DetailsSection `json:"details_parts,omitempty"`
	DownloadCount    *int64            `json:"download_count,omitempty"`
	EduDetails       *string           `json:"edu_details,omitempty"`
	Id               int64             `json:"id"`
	Instructions     *string           `json:"instructions,omitempty"`
	InstructionsHtml *string           `json:"instructions_html,omitempty"`
	IsCollected      *bool             `json:"is_collected,omitempty"`
	IsFeatured       *bool             `json:"is_featured,omitempty"`
	IsLiked          *bool             `json:"is_liked,omitempty"`
	IsPublished      *bool             `json:"is_published,omitempty"`
	IsWatched        *bool             `json:"is_watched,omitempty"`
	IsWip            *bool             `json:"is_wip,omitempty"`
	License          *string           `json:"license,omitempty"`
	LikesCount       *int64            `json:"likes_count,omitempty"`
	Modified         *string           `json:"modified,omitempty"`
	Name             string            `json:"name"`
	PublicUrl        *string           `json:"public_url,omitempty"`
	Thumbnail        *string           `json:"thumbnail,omitempty"`
	Url              *string           `json:"url,omitempty"`
	ViewCount        *int64            `json:"view_count,omitempty"`
}

// Things defines model for Things.
type Things []Thing

// User defines model for User.
type User struct {
	AcceptsTips *bool   `json:"accepts_tips,omitempty"`
	FirstName   *string `json:"first_name,omitempty"`
	Id          int64   `json:"id"`
	LastName    *string `json:"last_name,omitempty"`
	Name        string  `json:"name"`
	PublicUrl   *string `json:"public_url,omitempty"`
	Thumbnail   *string `json:"thumbnail,omitempty"`
	Url         *string `json:"url,omitempty"`
}

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(req *http.Request, ctx context.Context) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A callback for modifying requests which are generated before sending over
	// the network.
	RequestEditor RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = http.DefaultClient
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditor = fn
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetFileContentById request
	GetFileContentById(ctx context.Context, id string) (*http.Response, error)

	// SearchThingsByTerm request
	SearchThingsByTerm(ctx context.Context, term string) (*http.Response, error)

	// GetThingById request
	GetThingById(ctx context.Context, id string) (*http.Response, error)

	// GetThingFilesById request
	GetThingFilesById(ctx context.Context, id string) (*http.Response, error)

	// ListThingsByUsername request
	ListThingsByUsername(ctx context.Context, username string) (*http.Response, error)
}

func (c *Client) GetFileContentById(ctx context.Context, id string) (*http.Response, error) {
	req, err := NewGetFileContentByIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(req, ctx)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) SearchThingsByTerm(ctx context.Context, term string) (*http.Response, error) {
	req, err := NewSearchThingsByTermRequest(c.Server, term)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(req, ctx)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetThingById(ctx context.Context, id string) (*http.Response, error) {
	req, err := NewGetThingByIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(req, ctx)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetThingFilesById(ctx context.Context, id string) (*http.Response, error) {
	req, err := NewGetThingFilesByIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(req, ctx)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) ListThingsByUsername(ctx context.Context, username string) (*http.Response, error) {
	req, err := NewListThingsByUsernameRequest(c.Server, username)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(req, ctx)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

// NewGetFileContentByIdRequest generates requests for GetFileContentById
func NewGetFileContentByIdRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}
	queryUrl, err = queryUrl.Parse(fmt.Sprintf("/files/%s/download", pathParam0))
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSearchThingsByTermRequest generates requests for SearchThingsByTerm
func NewSearchThingsByTermRequest(server string, term string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "term", term)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}
	queryUrl, err = queryUrl.Parse(fmt.Sprintf("/search/%s", pathParam0))
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetThingByIdRequest generates requests for GetThingById
func NewGetThingByIdRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}
	queryUrl, err = queryUrl.Parse(fmt.Sprintf("/things/%s", pathParam0))
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetThingFilesByIdRequest generates requests for GetThingFilesById
func NewGetThingFilesByIdRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}
	queryUrl, err = queryUrl.Parse(fmt.Sprintf("/things/%s/files", pathParam0))
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListThingsByUsernameRequest generates requests for ListThingsByUsername
func NewListThingsByUsernameRequest(server string, username string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "username", username)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}
	queryUrl, err = queryUrl.Parse(fmt.Sprintf("/users/%s/things", pathParam0))
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		if !strings.HasSuffix(baseURL, "/") {
			baseURL += "/"
		}
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

type getFileContentByIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r getFileContentByIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r getFileContentByIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type searchThingsByTermResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Things
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r searchThingsByTermResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r searchThingsByTermResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type getThingByIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Thing
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r getThingByIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r getThingByIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type getThingFilesByIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Files
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r getThingFilesByIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r getThingFilesByIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type listThingsByUsernameResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Things
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r listThingsByUsernameResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r listThingsByUsernameResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetFileContentByIdWithResponse request returning *GetFileContentByIdResponse
func (c *ClientWithResponses) GetFileContentByIdWithResponse(ctx context.Context, id string) (*getFileContentByIdResponse, error) {
	rsp, err := c.GetFileContentById(ctx, id)
	if err != nil {
		return nil, err
	}
	return ParseGetFileContentByIdResponse(rsp)
}

// SearchThingsByTermWithResponse request returning *SearchThingsByTermResponse
func (c *ClientWithResponses) SearchThingsByTermWithResponse(ctx context.Context, term string) (*searchThingsByTermResponse, error) {
	rsp, err := c.SearchThingsByTerm(ctx, term)
	if err != nil {
		return nil, err
	}
	return ParseSearchThingsByTermResponse(rsp)
}

// GetThingByIdWithResponse request returning *GetThingByIdResponse
func (c *ClientWithResponses) GetThingByIdWithResponse(ctx context.Context, id string) (*getThingByIdResponse, error) {
	rsp, err := c.GetThingById(ctx, id)
	if err != nil {
		return nil, err
	}
	return ParseGetThingByIdResponse(rsp)
}

// GetThingFilesByIdWithResponse request returning *GetThingFilesByIdResponse
func (c *ClientWithResponses) GetThingFilesByIdWithResponse(ctx context.Context, id string) (*getThingFilesByIdResponse, error) {
	rsp, err := c.GetThingFilesById(ctx, id)
	if err != nil {
		return nil, err
	}
	return ParseGetThingFilesByIdResponse(rsp)
}

// ListThingsByUsernameWithResponse request returning *ListThingsByUsernameResponse
func (c *ClientWithResponses) ListThingsByUsernameWithResponse(ctx context.Context, username string) (*listThingsByUsernameResponse, error) {
	rsp, err := c.ListThingsByUsername(ctx, username)
	if err != nil {
		return nil, err
	}
	return ParseListThingsByUsernameResponse(rsp)
}

// ParseGetFileContentByIdResponse parses an HTTP response from a GetFileContentByIdWithResponse call
func ParseGetFileContentByIdResponse(rsp *http.Response) (*getFileContentByIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &getFileContentByIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseSearchThingsByTermResponse parses an HTTP response from a SearchThingsByTermWithResponse call
func ParseSearchThingsByTermResponse(rsp *http.Response) (*searchThingsByTermResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &searchThingsByTermResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		response.JSON200 = &Things{}
		if err := json.Unmarshal(bodyBytes, response.JSON200); err != nil {
			return nil, err
		}

	case strings.Contains(rsp.Header.Get("Content-Type"), "json"):
		response.JSONDefault = &Error{}
		if err := json.Unmarshal(bodyBytes, response.JSONDefault); err != nil {
			return nil, err
		}

	}

	return response, nil
}

// ParseGetThingByIdResponse parses an HTTP response from a GetThingByIdWithResponse call
func ParseGetThingByIdResponse(rsp *http.Response) (*getThingByIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &getThingByIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		response.JSON200 = &Thing{}
		if err := json.Unmarshal(bodyBytes, response.JSON200); err != nil {
			return nil, err
		}

	case strings.Contains(rsp.Header.Get("Content-Type"), "json"):
		response.JSONDefault = &Error{}
		if err := json.Unmarshal(bodyBytes, response.JSONDefault); err != nil {
			return nil, err
		}

	}

	return response, nil
}

// ParseGetThingFilesByIdResponse parses an HTTP response from a GetThingFilesByIdWithResponse call
func ParseGetThingFilesByIdResponse(rsp *http.Response) (*getThingFilesByIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &getThingFilesByIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		response.JSON200 = &Files{}
		if err := json.Unmarshal(bodyBytes, response.JSON200); err != nil {
			return nil, err
		}

	case strings.Contains(rsp.Header.Get("Content-Type"), "json"):
		response.JSONDefault = &Error{}
		if err := json.Unmarshal(bodyBytes, response.JSONDefault); err != nil {
			return nil, err
		}

	}

	return response, nil
}

// ParseListThingsByUsernameResponse parses an HTTP response from a ListThingsByUsernameWithResponse call
func ParseListThingsByUsernameResponse(rsp *http.Response) (*listThingsByUsernameResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &listThingsByUsernameResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		response.JSON200 = &Things{}
		if err := json.Unmarshal(bodyBytes, response.JSON200); err != nil {
			return nil, err
		}

	case strings.Contains(rsp.Header.Get("Content-Type"), "json"):
		response.JSONDefault = &Error{}
		if err := json.Unmarshal(bodyBytes, response.JSONDefault); err != nil {
			return nil, err
		}

	}

	return response, nil
}

